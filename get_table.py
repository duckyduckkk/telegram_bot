# -*- coding: utf-8 -*-
import pandas as pd

from config import sites,flags
from config import teams_short_cut as sh

def get_table(country):
    '''–î–æ—Å—Ç–∞–µ—Ç —Å —Å–∞–π—Ç–∞ html —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–∞–Ω–¥
    –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–µ –≤ —Ç–µ–∫—Å—Ç
    —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ normal_table –º–æ–¥—É–ª—è parse_table'''
    url = sites[country]+'table/'
    table = pd.read_html(url, header=0)
    table[1].index += 1 # index starts from 0 by default
    text = table[1].loc[:,['–ú','–û','–ö–æ–º–∞–Ω–¥–∞']].to_string(justify='right')
    table_for_message = normal_table(text)
    
    return(table_for_message)
    
def get_stat(country):
    '''–î–æ—Å—Ç–∞–µ—Ç —Å —Å–∞–π—Ç–∞ html —Ç–∞–±–ª–∏—Ü—É —Å–ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–æ–≤ 
    –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–µ –≤ —Ç–µ–∫—Å—Ç
    —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ normal_table –º–æ–¥—É–ª—è parse_table'''
    url = sites[country]+'stat/'
    table = pd.read_html(url, header=0)
    table[1].index +=1
    text = table[1].loc[:,['–ú','–ì','–ü','–ò–º—è']].to_string(justify='right',index=False)
    table_for_message = flags[country]+'\n'+normal_stat(text)
    
    return(table_for_message)

def make_league_table(country:str):
    '''–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü  html 
    –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç—É —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
    country -- –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
               –∏–∑ –º–æ–¥—É–ª—è config'''
               
    url = sites[country]+'table/'
    table_from_url = pd.read_html(url, header=0)
    header = '''‚Ññ  –ú  –û   –ö–æ–º–∞–Ω–¥–∞ {flag}\n'''.format(flag=flags[country])
    list_of_rows = table_from_url[1].loc[:,['Unnamed: 0','–ú','–û','–ö–æ–º–∞–Ω–¥–∞']].values.tolist()
    template = '''{0[0]:02d} {0[1]:02d} {0[2]}  {0[3]}'''
    final_output_table = header+'\n'.join([template.format(i) for i in list_of_rows])
    
    return final_output_table

    
def make_stat_table(country:str):
    '''–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü  html 
    –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–æ–≤
    country -- –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
               –∏–∑ –º–æ–¥—É–ª—è config'''
               
    url = sites[country]+'stat/'
    header = '''‚Ññ  –ú  –ì   –ü    –ò–º—è {flag}\n'''.format(flag=flags[country])
    table_from_url = pd.read_html(url, header=0)
    list_of_rows = table_from_url[1].loc[:,['Unnamed: 0','–ú','–ì','–ü','–ò–º—è']].values.tolist()
    template = '''{0[0]:02d} {0[1]:02d} {0[2]:02d} {0[3]:02d}  {0[4]}'''
    final_output_stat = header+'\n'.join([template.format(i) for i in list_of_rows])
    
    return final_output_stat
    
def make_schedule_for_next_tour(country):
    '''—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π 
    –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É 
    country -- –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
               –∏–∑ –º–æ–¥—É–ª—è config'''
    url = sites[country]+'calendar/'
    table_from_url = pd.read_html(url, header=0)
    header = '''–î–∞—Ç–∞{flag}         –°    –•–æ–∑üè†-–ì–æ—Åüöå\n'''.format(flag=flags[country])
    tours = len(table_from_url[1:])
    
    for i in range(1,tours):
        score_col = table_from_url[i]['–°—á–µ—Ç'].values.tolist()
        data_col = table_from_url[i]['–î–∞—Ç–∞'].values.tolist()
        if '- : -' in score_col and '–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω' not in data_col:
            next_tour = table_from_url[i].loc[:,['–î–∞—Ç–∞','–°—á–µ—Ç','–•–æ–∑—è–µ–≤–∞','–ì–æ—Å—Ç–∏']]
            future_tour = table_from_url[i+1].loc[:,['–î–∞—Ç–∞','–°—á–µ—Ç','–•–æ–∑—è–µ–≤–∞','–ì–æ—Å—Ç–∏']]
            schedule = pd.concat([next_tour,future_tour])
            break
        else:
            schedule = table_from_url[tours].loc[:,['–î–∞—Ç–∞','–°—á–µ—Ç','–•–æ–∑—è–µ–≤–∞','–ì–æ—Å—Ç–∏']]
            
    if 'schedule' not in locals():         #–∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ 1 —Ç—É—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ
        schedule = table_from_url[tours].loc[:,['–î–∞—Ç–∞','–°—á–µ—Ç','–•–æ–∑—è–µ–≤–∞','–ì–æ—Å—Ç–∏']]
        
    schedule['–î–∞—Ç–∞'] = [item[:5]+'|'+item[-5:] if item[:2]!='–ø–µ' else item for item in schedule['–î–∞—Ç–∞']]
    schedule['–•–æ–∑—è–µ–≤–∞'] = [sh[item] if item in sh.keys() else item for item in schedule['–•–æ–∑—è–µ–≤–∞']]
    schedule['–ì–æ—Å—Ç–∏'] = [sh[item] if item in sh.keys() else item for item in schedule['–ì–æ—Å—Ç–∏']]
    schedule['–°—á–µ—Ç'] = [i[0]+':'+i[4] for i in schedule['–°—á–µ—Ç']]
    list_of_rows = schedule.values.tolist()
    template = template = '''{0[0]} {0[1]} {0[2]}-{0[3]}'''
    
    final_output_schedule = header + '\n'.join([template.format(i) for i in list_of_rows])
    
    return final_output_schedule
